<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JSON随笔]]></title>
    <url>%2F2019%2F08%2F12%2FJSON%E9%9A%8F%E7%AC%94%2F</url>
    <content type="text"><![CDATA[json现在多用于存储和交换文本信息的语法进行数据的传输JSON 比 XML 更小、更快，更易解析 概念JavaScript Object Notation, JavaScript对象表示法 java 写法 1234Person p = new Person();p.setName("张三");p.setAge(23);p.setGender("男"); json写法 1var p = &#123;"name":"张三","age":23,"gender":"男"&#125;; 语法基本规则 数据在名称/值对中：json数据是由键值对构成的 键用引号(单双都行)引起来，也可以不使用引号 值的取值类型： 数字（整数或浮点数） 字符串（在双引号中） 逻辑值（true 或 false） 数组（在方括号中） {“persons”:[{},{}]} 对象（在花括号中） {“address”:{“province”：”陕西”….}} 数据由逗号分隔：多个键值对由逗号分隔 花括号保存对象：使用{}定义json 格式 方括号保存数组：[] 获取数据 json对象.键名 json对象[“键名”] 数组对象[索引] 遍历1234//获取p对象中所有的键和值for(var key in p)&#123; alert(key+":"+p[key]);&#125; JSON数据和Java对象的相互转换导入jackson的相关jar包 jackson-annotations-2.2.3.jarjackson-core-2.2.3.jarjackson-databind-2.2.3.jar Java对象转换JSON 创建Jackson核心对象 ObjectMapper 1ObjectMapper mapper = new ObjectMapper(); 调用ObjectMapper的相关方法进行转换 1mapper.writeValueAsString(obj); //将对象转为json字符串 JSON转为Java对象 创建Jackson核心对象 ObjectMapper 1ObjectMapper mapper = new ObjectMapper(); 调用ObjectMapper的相关方法进行转换 1234//1.初始化JSON字符串String json = "&#123;\"gender\":\"男\",\"name\":\"张三\",\"age\":23&#125;";//2.转换mapper.readValue(json字符串数据,类名.Class)]]></content>
      <tags>
        <tag>web</tag>
        <tag>随笔</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AJAX快速入门]]></title>
    <url>%2F2019%2F08%2F12%2FAJAX%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[概念Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。 异步和同步：客户端和服务器端相互通信的基础上 客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。 客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。 实现方式：JQeury实现方式$.post()：发送post请求 * 语法：$.get(url, [data], [callback], [type]) * 参数： * url：请求路径 * data：请求参数 * callback：回调函数 * type：响应结果的类型]]></content>
      <tags>
        <tag>web</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA代码书写规范]]></title>
    <url>%2F2019%2F08%2F06%2FJAVA%E4%BB%A3%E7%A0%81%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[这是我整理的一些java书写规范。可能和网上的有些出入但是，规范这么多，适合自己的才是最好的。 一般原则 尽量使用完整的英文描述符 采用适用于相关领域的术语 采用大小写混合增强可读性 尽量少用缩写，但如果用了，要明智地使用，且在整个工程中统一 避免使用长的名字 避免使用类似的名字，或者仅仅是大小写不同的名字 避免使用下划线（除静态常量等) 命名的字母大小写问题 包名： 字母全小写 例如: cn.coderstory.Activity.Main 类，接口 ：首字母大写，其他全小写 例如: class Container 方法，变量 ：第二个单词开始首字母大写 例如: seedMessage 常量： 大写，单词用“_”分割 例如: final static MIN_WIDTH = 4 接口 ：首字母大写 ，后缀Impl 例如: class ContainerImpl 异常类： 首字母大写， 后缀Exception 例如: DataNotFoundException 抽象类 ：首字母大写， 前缀Abstract 例如: AbstractBeanDefinition Test类： 首字母大写， 后缀Test 例如: public Location newLocation() 方法的命名 类中获取值方法，一般要求被方法名使用被访问字段名，前面加上前缀get，如 getLastUser(), getUserCount() 返回布尔型的判断方法一般要求方法名使用单词 is 做前缀，如isPersistent(),isString()。 或者使用具有逻辑意义的单词，例如equal 或equals 用于修改某些设置的方法（一般返回类型为void）：被访问字段名的前面加上前缀 set，如setFirstName(),setLastName()，setWarpSpeed()。 已办的方法一般采用完整的英文描述说明成员方法功能，第一个单词尽可能采用一个生动的动词，第一个字母小写，如 openFile(), addAccount()。 接口 ：首字母大写 ，后缀Impl 例如: class ContainerImpl 异常类： 首字母大写， 后缀Exception 例如: DataNotFoundException 抽象类 ：首字母大写， 前缀Abstract 例如:AbstractBeanDefinition Test类： 首字母大写， 后缀Test 例如: public Location newLocation() Java注释约定 类的整体注释：遵循JavaDoc的规范，在每一个源文件的开头注明该CLASS的作用, 作简要说明, 并写上源文件的作者, 编写日期。如果是修改别人编写的源文件，要在修改信息上注明修改者和修改日期。例如：/**@（#）:CLASSNAME.java@description: Description of this java@author: PROGRAMMER’S NAME YYYY/MM/DD@version: Version No.@modify:@Copyright: 版权由拥有*/ 类中方法的注释：遵循JavaDoc的规范，在每个方法的前部用块注释的方法描述此方法的作用，以及传入，传出参数的类型和作用，以及需要捕获的错误。例如：/**方法的描述@param 参数的描述@return 返回类型的描述@exception 出错信息的描述*/ 行注释：使用//…的注释方法来注释需要表明的内容。并且把注释的内容放在需要注释的代码的前面一行或同一行。 块注释：使用/*和/注释的方法来注释需要表明的内容。并且把注释的内容放在需要注释的代码的前面。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F07%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
