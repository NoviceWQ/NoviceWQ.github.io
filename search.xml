<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JAVA代码书写规范]]></title>
    <url>%2F2019%2F08%2F06%2FJAVA%E4%BB%A3%E7%A0%81%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[这是我整理的一些java书写规范。可能和网上的有些出入但是，规范这么多，适合自己的才是最好的。 一般原则 尽量使用完整的英文描述符 采用适用于相关领域的术语 采用大小写混合增强可读性 尽量少用缩写，但如果用了，要明智地使用，且在整个工程中统一 避免使用长的名字 避免使用类似的名字，或者仅仅是大小写不同的名字 避免使用下划线（除静态常量等) 命名的字母大小写问题 包名： 字母全小写 例如: cn.coderstory.Activity.Main 类，接口 ：首字母大写，其他全小写 例如: class Container 方法，变量 ：第二个单词开始首字母大写 例如: seedMessage 常量： 大写，单词用“_”分割 例如: final static MIN_WIDTH = 4 接口 ：首字母大写 ，后缀Impl 例如: class ContainerImpl 异常类： 首字母大写， 后缀Exception 例如: DataNotFoundException 抽象类 ：首字母大写， 前缀Abstract 例如: AbstractBeanDefinition Test类： 首字母大写， 后缀Test 例如: public Location newLocation() 方法的命名 类中获取值方法，一般要求被方法名使用被访问字段名，前面加上前缀get，如 getLastUser(), getUserCount() 返回布尔型的判断方法一般要求方法名使用单词 is 做前缀，如isPersistent(),isString()。 或者使用具有逻辑意义的单词，例如equal 或equals 用于修改某些设置的方法（一般返回类型为void）：被访问字段名的前面加上前缀 set，如setFirstName(),setLastName()，setWarpSpeed()。 已办的方法一般采用完整的英文描述说明成员方法功能，第一个单词尽可能采用一个生动的动词，第一个字母小写，如 openFile(), addAccount()。 接口 ：首字母大写 ，后缀Impl 例如: class ContainerImpl 异常类： 首字母大写， 后缀Exception 例如: DataNotFoundException 抽象类 ：首字母大写， 前缀Abstract 例如:AbstractBeanDefinition Test类： 首字母大写， 后缀Test 例如: public Location newLocation() Java注释约定 类的整体注释：遵循JavaDoc的规范，在每一个源文件的开头注明该CLASS的作用, 作简要说明, 并写上源文件的作者, 编写日期。如果是修改别人编写的源文件，要在修改信息上注明修改者和修改日期。例如：/**@（#）:CLASSNAME.java@description: Description of this java@author: PROGRAMMER’S NAME YYYY/MM/DD@version: Version No.@modify:@Copyright: 版权由拥有*/ 类中方法的注释：遵循JavaDoc的规范，在每个方法的前部用块注释的方法描述此方法的作用，以及传入，传出参数的类型和作用，以及需要捕获的错误。例如：/**方法的描述@param 参数的描述@return 返回类型的描述@exception 出错信息的描述*/ 行注释：使用//…的注释方法来注释需要表明的内容。并且把注释的内容放在需要注释的代码的前面一行或同一行。 块注释：使用/*和/注释的方法来注释需要表明的内容。并且把注释的内容放在需要注释的代码的前面。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F07%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
